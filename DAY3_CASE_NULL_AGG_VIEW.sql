SELECT * FROM TRANSAC ORDER BY PRICE, DISC_PEC;
SELECT * FROM TRANSAC ORDER BY PRICE DESC, DISC_PEC;

USE ECOMMERCE_PLATFORM;

SELECT * FROM TRANSAC;

SELECT DISTINCT PRODUCTID FROM TRANSAC;  --GIVES YOU UNIQUE VALUES FROM THE COLUMNS

SELECT PRODUCTID, PRICE FROM TRANSAC WHERE PRODUCTID IN ('P1');

INSERT INTO TRANSAC       --FILL IN INFORMATION INTO THE TABLE CREATED (HERE ITS TRANSACION TABLE)
VALUES                  -- ALL VALUES SHOULD BE STORED IN ORDER OF THE COLUMN NAMES
(1010,'P1','TSHIRT',NULL,NULL)  -- INSERTING A NULL VALUE IN THE TABLE
;

SELECT * FROM TRANSAC;

SELECT * FROM TRANSAC WHERE PRICE IS NOT NULL;
SELECT *, ISNULL(PRICE,50) AS UPDT_PRC FROM TRANSAC;  --GIVING ALIAS TO ISNULL(PRICE,50) I.E. GIVING IT A COLUMN NAME -- IF there is a null replace that null value with a given value keeping the actual table intact and creating a new column
SELECT *, COALESCE(PRICE,100) AS UPDT_PRC2 FROM TRANSAC; -- ADVANTAGE OF COALESCE IS IT TAKES IN THE FIRST NON NULL VALUES IN ORDER OF THE COLUMNS SPECIFIED (FROM MULTIPLE COLUMNS) 


-- Bucket the products as per price ranges as high, medium and low 

CREATE VIEW TRANSAC_PRC AS 
SELECT *  --BASE TRANSAC
	, CASE        -- DEFINING CONDITIONS 
	WHEN PRICE>100 THEN 'HIGH'  -- IF ELSE STATEMENTS 
	WHEN PRICE>50 AND PRICE<100 THEN 'MEDIUM'
	ELSE 'LOW'
	END AS PRICE_CLASS    -- THE NEW COLUMN CREATED WILL BE UPDATED IN THE TABLE(VIEW TRANSAC_PRC) AND THE COLUMN WILL STAY
	FROM TRANSAC ; 

--DROP VIEW TRANSAC_PRC;
SELECT * FROM TRANSAC_PRC;

-- DROP VIEW TRANSAC_PRC_CLASS;
-- Make product categories and classify the items

CREATE VIEW TRANSAC_PRC_CLASS AS
SELECT *     -- * HERE IS ALL COLUMNS FROM THE NEW TABLE TRANSAC_PRC
		, CASE 
		WHEN PRODUCTDESC IN ('TSHIRT','SHIRT') THEN 'MENS WEAR'
		WHEN PRODUCTDESC IN ('SAREE','TOP') THEN 'WOMEN WEAR'
		WHEN PRODUCTDESC IN ('PANT') THEN 'UNISEX'
		ELSE 'UNK'
		END AS PRODUCT_CLASS
		FROM TRANSAC_PRC;  -- USING THE LAST CREATED TABLE AM UPDATING IT AGAIN WITH A NEW COLUMN

SELECT * FROM TRANSAC_PRC_CLASS;

-- Want to see how many products has price >100
SELECT COUNT(*) FROM TRANSAC_PRC_CLASS WHERE PRICE>100;

SELECT COUNT(*) FROM TRANSAC WHERE PRICE>100;

SELECT * FROM TRANSAC_PRC_CLASS;

-- https://www.w3schools.com/sql/sql_like.asp 

SELECT * FROM TRANSAC_PRC_CLASS
		WHERE PRODUCT_CLASS LIKE '%MEN%';

SELECT * FROM TRANSAC_PRC_CLASS;
SELECT * FROM TRANSAC_PRC_CLASS WHERE PRODUCT_CLASS LIKE '%WEAR%';
SELECT PRODUCTID, PRICE FROM TRANSAC_PRC_CLASS WHERE PRODUCT_CLASS LIKE '%WEAR%' OR ;

SELECT * FROM TRANSAC_PRC_CLASS
		WHERE PRODUCT_CLASS LIKE 'M%';

-- Want to see total number of products sold as per product description 
SELECT PRODUCTDESC
		, COUNT(PRODUCTID) AS NUM_OF_PRODS    -- GIVES ME THE COUNT OF PRODUCTID UNDER THE INDIVIDUAL GROUPS/UNIQUE RECORDS IN PRODUCTDESC
			FROM TRANSAC 
	   GROUP BY PRODUCTDESC;

	   SELECT * FROM TRANSAC;

-- Want to see the no. of distinct products sold under every product description
SELECT PRODUCTDESC
		, COUNT(DISTINCT PRODUCTID) AS NUM_OF_PRODS -- GIVES ME THE COUNT OF UNIQUE PRODUCTS UNDER THE INDIVIDUAL GROUPS/UNIQUE RECORDS IN PRODUCTDESC
			FROM TRANSAC 
		GROUP BY PRODUCTDESC;


SELECT PRODUCTDESC
		, COUNT(PRODUCTID) AS NUM_OF_PRODS 
			FROM TRANSAC 
		GROUP BY PRODUCTDESC 
		HAVING COUNT(PRODUCTID)>3;   -- FOR AGGREGATE FUNCTIONS USE HAVING AND NOT WHERE -- WHENEVER YOU WANT TO FILTER ON AGGREGATED VALUES USE HAVING


SELECT * FROM TRANSAC;

SELECT * FROM TRANSAC_PRC_CLASS;

-- How much revenue did we generate from every product 
SELECT PRODUCTID
		, SUM(PRICE) AS TOTAL_REVENUE
		FROM TRANSAC_PRC_CLASS
		GROUP BY PRODUCTID;

SELECT * FROM TRANSAC_PRC_CLASS;
-- How much AVERAGE revenue did we generate from every product class
SELECT PRODUCT_CLASS
		, AVG(PRICE) AS MEAN_REVENUE_GENERATED
		FROM TRANSAC_PRC_CLASS
		GROUP BY PRODUCT_CLASS;

SELECT PRODUCTID
		, MAX(DISC_PEC) AS MAX_DISCOUNT_GIVEN
		FROM TRANSAC_PRC_CLASS
		GROUP BY PRODUCTID;

SELECT * FROM TRANSAC_PRC_CLASS;

SELECT PRODUCT_CLASS        -- ALWAYS SPECIFY ALL THE AGGREGATIONS AFTER THE GROUPS AND BEFORE THE FROM STATEMENTS -- THE ORDER OF GROUP BY SHOULD BE THE SAME AS ORDER OF THE INPUT SEQUENCE AFTER SELECT
		, PRODUCTDESC
		, SUM(PRICE) AS TOTAL_REVENUE
		, SUM(DISC_PEC) AS TOTAL_DISCOUNT_GIVEN
		FROM TRANSAC_PRC_CLASS
		GROUP BY 
		PRODUCT_CLASS,
		PRODUCTDESC
		ORDER BY PRODUCT_CLASS,PRODUCTDESC;
