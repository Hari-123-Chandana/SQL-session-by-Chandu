USE ECOMMERCE_PLATFORM;

SELECT * FROM TRANSAC_PRC_CLASS;

SELECT A.*,   -- PULLING ALL COLUMNS FROM THE INNER TABLE 
		CASE WHEN A.PRODUCTDESC=A.LAG_PRODDESC THEN 'CONSECUTIVE BUY'
		ELSE 'NON CONSECUTIVE BUY' END AS BUY_FLAG  -- COMPARING THE LAGGED COLUMN VALUE WITH THE BASE TABLE ACTUAL PRODUCTDESC VALUE
		FROM (   --- INNER QUERY WE ARE CREATING THE LAGGED VALUES COLUMN 
				SELECT *
						, LAG(PRODUCTDESC, 1) OVER (ORDER BY TNXID, PRODUCTDESC) AS LAG_PRODDESC   --LAG(PRODUCTDESC, 1) IS PULLING DOWN THE ENTIRE PRODUCTDESC SERIES BY 1 ROW  -- (ORDER BY TNXID, PRODUCTDESC) [HERE IN OUR CASE OUR DATA WAS ALREADY ORDERED IN THIS PARTICULAR FORMAT BUT IN THE SYNTAX WE NEED TO SPECIFY ORDER BY 
						FROM TRANSAC_PRC_CLASS
			 ) A
			 ;

-- ORDER OF EXECUTION -- FROM - WHERE - GROUP BY 
-----------------------------------

CREATE TABLE ProductSales
(
  [Year]  INT
 ,[Quarter] TINYINT
 ,Sales     FLOAT
);
 
INSERT INTO ProductSales VALUES 
 (2017, 1, 55000)
,(2017, 2, 78000)
,(2017, 3, 49000)
,(2017, 4, 32000)
,(2018, 1, 41000)
,(2018, 2, 8965)
,(2018, 3, 69874)
,(2018, 4, 32562)
,(2019, 1, 87456)
,(2019, 2, 75000)
,(2019, 3, 96500)
,(2019, 4, 85236);


SELECT * FROM ProductSales;

-- HOW MUCH GROWTH DID WE DO IN EVERY YEAR QoQ
SELECT P.*
	, ROUND(((P.SALES - P.NEXTSALES)/P.SALES)*100,2)
				FROM   
					(SELECT [Year], 
						   [Quarter], 
						   Sales, 
						   LEAD(Sales, 1, 0) OVER (PARTITION BY [Year] ORDER BY [Year], [Quarter] ASC) AS NEXTSALES  -- LEAD(Sales, 1, 0) -- PULLING THE NEXT VALUE UP BY 1 ROW -- (PARTITION BY [Year] -- IT IS FIRST DIVIDING INTO GROUPS ON THE BASIS OF YEAR AND THEN IT IS APPLYING THE LEAD(Sales, 1,0) OPERATION BY PULLING THE VALUES BY 1 ROW UP WITHIN THAT PARTICULAR GROUP 
					FROM ProductSales                                                                                --  ORDER BY [Year], [Quarter] ASC ARRANGING THE DATA FIRST BY YEAR, AND THEN BY QUARTER IN ASCENDING
					) P
;
 -- ANALYZE IN WHICH QUATERS DID WE DO THE MOST SALES AND THE POOREST
 -- ANALYZE WHICH YEAR DID WE DO THE MOST SALES
 -- ANALYZE YEAR OVER YEAR GROWTH/DE-GROWTH 
 -- QoQ GROWTH/DE-GROWTH (NO YEAR IN IT)
 
 
 
 
 
 ------------------ CASE STUDY ----------------------
 
 -----------------------------------------------------------

SELECT * FROM TRANSACTION_V1;

SELECT * FROM CUST_360_INFO_V1;

SELECT * FROM CUSTSEGROLL_V1;

SELECT * FROM CALENDER;

SELECT * FROM ORDER_RETTYPE;

--CUSTOMER_ID , CUST_SEG
-----------------------------------------------------------

SELECT COUNT(*) FROM CUST_360_INFO_V1 WHERE CUSTOMER_SEGMENTS IS NULL;


SELECT DISTINCT T.AMPERITY_ID
		, COALESCE (CR.SEGMENT,C.CUSTOMER_SEGMENTS) AS CUSTOMER_SEG
		--, C.TIER_NAME

		FROM TRANSACTION_V1 T
		LEFT JOIN CUST_360_INFO_V1 C
		ON T.AMPERITY_ID=C.AMP_ID
		LEFT JOIN CUSTSEGROLL_V1 CR
		ON CR.AMPERITY_ID=T.AMPERITY_ID;


--DROP VIEW RETURNS_ANALYSIS_M;

--CTE - COMMON TABLE EXPRESSIONS

CREATE VIEW RETURNS_ANALYSIS_TABLE AS
WITH LOYALTY AS (
				 SELECT A.AMP_ID, A.TIER_NAME FROM (
				 SELECT *
						, ROW_NUMBER() OVER (PARTITION BY AMP_ID ORDER BY LAST_ACTIVITY_DATE DESC) AS LOYALTY_ROW_NUM 
				 FROM CUST_360_INFO_V1) A
				 WHERE A.LOYALTY_ROW_NUM = 1
				 ),

CUSTSEG AS (SELECT DISTINCT A.AMPERITY_ID
					, COALESCE (CR.SEGMENT,C.CUSTOMER_SEGMENTS) AS CUSTOMER_SEG
					FROM TRANSACTION_V1 A
					LEFT JOIN CUST_360_INFO_V1 C
					ON A.AMPERITY_ID=C.AMP_ID
					LEFT JOIN CUSTSEGROLL_V1 CR
					ON CR.AMPERITY_ID=A.AMPERITY_ID
			)

SELECT T.AMPERITY_ID
		, C.CUSTOMER_SEG
		, L.TIER_NAME
		, MONTH(T.ORDER_DATETIME) AS MONTH_NUM
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='FALSE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_REVENUE END)),0) AS GROSS_SALES
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='TRUE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_REVENUE END)),0) AS GROSS_RETURNS
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='FALSE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_QUANTITY END)),0) AS GROSS_ITEMS_ORDERED
		, ISNULL(SUM(ABS(CASE WHEN T.IS_RETURN='TRUE' AND T.IS_CANCELLATION='FALSE' THEN T.ITEM_QUANTITY END)),0) AS GROSS_ITEMS_RETURNED
		FROM TRANSACTION_V1 T
		LEFT JOIN LOYALTY L
		ON T.AMPERITY_ID=L.AMP_ID

		LEFT JOIN CUSTSEG C
		ON C.AMPERITY_ID=T.AMPERITY_ID

		GROUP BY T.AMPERITY_ID, CUSTOMER_SEG, TIER_NAME, MONTH(T.ORDER_DATETIME);
		
SELECT * FROM RETURNS_ANALYSIS_TABLE;		
