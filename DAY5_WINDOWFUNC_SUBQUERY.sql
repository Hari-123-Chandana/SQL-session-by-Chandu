USE ECOMMERCE_PLATFORM;

SELECT * FROM TRANSAC_PRC_CLASS;
SELECT * FROM ORD_CUST_DETAILS;
SELECT * FROM LOC_DETAILS;

SELECT PRODUCT_CLASS   --CONCAT IS USED TO ADD ANY ELEMENT IN COLUMN VALUES  -- ROUND IS ROUNDING UPTO DECIMAL PLACES
		, CONCAT(ROUND(SUM(PRICE) / (SELECT SUM(PRICE) FROM TRANSAC_PRC_CLASS)*100,2),'%') AS REVENUE_CONTRI  -- SUBQUERY HERE IS USED AS THE DENOMINATOR NEED TO BE SAME THROUGHOUT  -- SUM(PRICE) WILL GIVE YOU THE PRODUCT_CLASS WISE TOTAL REVENUE GENERATED -- NOW TO GET THE CONTRIBUTON OF THAT PRODUCT CLASS FROM SALES YOU NEED TOTAL REVENUE GENERATED IRRESPECTIVE OF ANYTHING
	FROM TRANSAC_PRC_CLASS
		GROUP BY PRODUCT_CLASS;

-----------------------------

SELECT L.REGION  -- SAME IN CASE OF REGION -- THE DENOMINATOR SHOULD BE THE SAME, BUT THE NEUMERATOR SHOULD BE REGION WISE REVENUE GENERATED WHICH IS TAKEN CARE IN GROUP BY REGION
		, CONCAT(ROUND((SUM(T.PRICE)/ (SELECT SUM(PRICE) FROM TRANSAC_PRC_CLASS))*100,2),'%') AS REV_CONTRI
			FROM TRANSAC_PRC_CLASS T

			LEFT JOIN
			ORD_CUST_DETAILS O
			ON T.TNXID=O.TNXID

			LEFT JOIN
			LOC_DETAILS L
			ON L.LOC_NAME=O.CUST_CITY

			GROUP BY
			L.REGION;

--------------------------------------------------

SELECT A.REGION
		, ROUND((A.TOT_REV/ (SELECT SUM(PRICE) FROM TRANSAC_PRC_CLASS))*100,2) AS REV_CONTRI -- THE OUTER QUERY IS PULLING THE VALUE FROM THE INNER TABLE CREATED BY THE QUERY AND THE REQUIRED OPERATION IS DONE 
			FROM
					(    -- THIS INNER CODE IS GENERATING A TABLE 
						SELECT L.REGION,
						SUM(T.PRICE) AS TOT_REV
						FROM 
						TRANSAC_PRC_CLASS T
						LEFT JOIN
						ORD_CUST_DETAILS O
						ON
						T.TNXID=O.TNXID
						LEFT JOIN
						LOC_DETAILS L
						ON
						L.LOC_NAME=O.CUST_CITY
						GROUP BY
						L.REGION
					)A
					;



USE ECOMMERCE_PLATFORM;

SELECT * FROM TRANSAC_PRC_CLASS;

SELECT *      -- PARTITION BY PRODUCT_CLASS IS CREATING GROUPS IN THE TABLE AND RANKING THE TRANSACTION AS PER PRICE VALUES IN THAT PRODUCT_CLASS GROUP
		, RANK() OVER (PARTITION BY PRODUCT_CLASS ORDER BY PRICE DESC) AS RNK_PRICE
		FROM TRANSAC_PRC_CLASS
		ORDER BY PRODUCT_CLASS;

-- CALC. CONTRIBUTION OF EVERY TRANSACTION FROM EVERY PRODUCT_CLASS GROUP 
SELECT T.*, ROUND((T.PRICE/T.PROD_CLASSWISE_REV)*100,2) AS CONTRI   -- THE OUTER QUERY KEEPS THE ENTIRE TABLE INTACT AND DIVIDES THE INDIVIDUAL TRANSACTION PRICE WITH THE PRODUCT_CLASS GROUP REVENUES
FROM (
		SELECT *   -- THE INNER QUERY CALC. THE TOTAL REVENUE PRODUCT_CLASS WISE AS A SEPERATE COLUMN KEEPING THE ENTIRE BASE TABLE INTACT AS I NEED EVERY TRANSACTION VALUE TO DIVIDE WITH THE PRICE AND GET THE INDIVIDUAL TRANSACTION CONTRI
				,SUM(PRICE) OVER (PARTITION BY PRODUCT_CLASS) AS PROD_CLASSWISE_REV
				FROM TRANSAC_PRC_CLASS
		--ORDER BY PRODUCT_CLASS
		) AS T ;

USE ECOMMERCE_PLATFORM;

SELECT L.REGION
		,  SUM(T.PRICE) AS TOT_REV	
		--, RANK() OVER (PARTITION BY REGION ORDER BY TOT_REV)
		FROM TRANSAC_PRC_CLASS T
		
			LEFT JOIN
			ORD_CUST_DETAILS AS O
			ON 
			T.TNXID=O.TNXID

			LEFT JOIN
			LOC_DETAILS L
			ON L.LOC_NAME=O.CUST_CITY 

			GROUP BY 
			L.REGION;


-- GET ME THE REGION AND THE PRODUCT CLASS THAT IS PERFORMING THE POOREST 

-- FIRST STEP: GET THE REGION-PRODUCT_CLASS WISE REVENUE GENERATED
-- SECOND STEP: RANK THE PRODUCT_CLASS UNDER EVERY REGION PARTITION AS PER THE REVENUE GENERATED
-- THRID STEP: FILTER OUT ONLY THE REGION-PRODUCT_CLASS COMBINATION THAT HAS RANK 1 AS WE ARRANGED IN ASCENDING
SELECT B.* FROM (  -- THIS SUBQUERY GETS IN THE REQUIRED AGGREGATED VALUES FROM THE INNER QUERY AND RANKS ACCORDING TO THE CONDITION
				SELECT A.REGION
						, A.PRODUCT_CLASS
						, A.TOT_REV
						, RANK() OVER (PARTITION BY A.REGION ORDER BY A.TOT_REV) AS RANK_REGION_SALES
						FROM (  -- INNER TABLE GENERATING STEP 1
								SELECT L.REGION   
										, T.PRODUCT_CLASS
									,  SUM(T.PRICE) AS TOT_REV	
									FROM TRANSAC_PRC_CLASS T
		
										LEFT JOIN
										ORD_CUST_DETAILS AS O
										ON 
										T.TNXID=O.TNXID

										LEFT JOIN
										LOC_DETAILS L
										ON L.LOC_NAME=O.CUST_CITY 

										GROUP BY 
										L.REGION
										, T.PRODUCT_CLASS
							 ) A
				) B
			WHERE RANK_REGION_SALES = 1  -- FINALLY FILTERING IT OUT
		;

USE ECOMMERCE_PLATFORM;
SELECT * FROM TRANSAC_PRC_CLASS;

SELECT A.*, 
		CASE WHEN A.PRODUCTDESC=A.LAG_PRODDESC THEN 'CONSECUTIVE BUY'
		ELSE 'NON CONSECUTIVE BUT' END AS BUY_FLAG
		FROM (
				SELECT *
						, LAG(PRODUCTDESC, 1) OVER (ORDER BY TNXID, PRODUCTDESC) AS LAG_PRODDESC
						FROM TRANSAC_PRC_CLASS
			 ) A
			 ;
